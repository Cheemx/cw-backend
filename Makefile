# === CONFIG ===
GOOS=linux
GOARCH=amd64
BUILD_FLAGS=-ldflags="-s -w"
BIN_DIR=bin
ZIP_CMD=build-lambda-zip -o

# === FUNCTION LIST ===
FUNCTIONS := \
	hello \
	login \
	tb-crud/tbGetAll \
	tb-crud/tbGetOne \
	tb-crud/tbCreate \
	tb-crud/tbDelete \
	lc-crud/lcGetAll \
	lc-crud/lcCreate \
	lc-crud/lcDelete \
	wc-crud/wcGetAll \
	wc-crud/wcGetOne \
	wc-crud/wcCreate \
	wc-crud/wcDelete

# === AUTO BUILD RULES ===
define build_lambda
build-$(1):
	cd functions/$(1) && \
	env GOARCH=$(GOARCH) GOOS=$(GOOS) go build $(BUILD_FLAGS) -o ../../../$(BIN_DIR)/bootstrap main.go && \
	cd ../../../$(BIN_DIR) && \
	file bootstrap && \
	$(ZIP_CMD) $(notdir $(1)).zip bootstrap && \
	rm bootstrap && \
	cd ..
endef

# Special cases like hello and login (not in functions folder)
define build_simple
build-$(1):
	cd $(1) && \
	env GOARCH=$(GOARCH) GOOS=$(GOOS) go build $(BUILD_FLAGS) -o ../$(BIN_DIR)/bootstrap main.go && \
	cd ../$(BIN_DIR) && \
	file bootstrap && \
	$(ZIP_CMD) $(1).zip bootstrap && \
	rm bootstrap && \
	cd ..
endef

$(foreach f,$(filter-out hello login,$(FUNCTIONS)),$(eval $(call build_lambda,$(f))))
$(foreach f,$(filter hello login,$(FUNCTIONS)),$(eval $(call build_simple,$(f))))

# === ALIASES ===
.PHONY: build
build: $(addprefix build-,$(FUNCTIONS))
	@echo "âœ… All functions built successfully!"

deploy: build
	serverless deploy --aws-profile cheems-writes --verbose

clean:
	rm -rf ./bin ./vendor Gopkg.lock .serverless

log:
	serverless logs -f tb-getAll --stage dev --region ap-south-1 --aws-profile cheems-writes


# My own non-DRY Makefile(Don't know much about Makefile, will study once I get much time above is generated by GPT ðŸ˜‰)

# build-hello:
# 	cd hello && env GOARCH=amd64 GOOS=linux go build -ldflags="-s -w" -o ../bin/bootstrap main.go && cd ..
# 	cd bin && file bootstrap && build-lambda-zip -o hello.zip bootstrap && rm bootstrap && cd ..

# build-login:
# 	cd login && env GOARCH=amd64 GOOS=linux go build -ldflags="-s -w" -o ../bin/bootstrap main.go && cd ..
# 	cd bin && file bootstrap && build-lambda-zip -o login.zip bootstrap && rm bootstrap && cd ..

# build-tb-getAll:
# 	cd functions/tb-crud/tbGetAll && env GOARCH=amd64 GOOS=linux go build -ldflags="-s -w" -o ../../../bin/bootstrap main.go && cd ../../..
# 	cd bin && file bootstrap && build-lambda-zip -o tbGetAll.zip bootstrap && rm bootstrap && cd ..

# build-tb-getOne:
# 	cd functions/tb-crud/tbGetOne && env GOARCH=amd64 GOOS=linux go build -ldflags="-s -w" -o ../../../bin/bootstrap main.go && cd ../../..
# 	cd bin && file bootstrap && build-lambda-zip -o tbGetOne.zip bootstrap && rm bootstrap && cd ..

# build-lc-getAll:
# 	cd functions/lc-crud/lcGetAll && env GOARCH=amd64 GOOS=linux go build -ldflags="-s -w" -o ../../../bin/bootstrap main.go && cd ../../..
# 	cd bin && file bootstrap && build-lambda-zip -o lcGetAll.zip bootstrap && rm bootstrap && cd ..

# build-lc-getOne:
# 	cd functions/lc-crud/lcGetOne && env GOARCH=amd64 GOOS=linux go build -ldflags="-s -w" -o ../../../bin/bootstrap main.go && cd ../../..
# 	cd bin && file bootstrap && build-lambda-zip -o lcGetOne.zip bootstrap && rm bootstrap && cd ..

# build-wc-getAll:
# 	cd functions/wc-crud/wcGetAll && env GOARCH=amd64 GOOS=linux go build -ldflags="-s -w" -o ../../../bin/bootstrap main.go && cd ../../..
# 	cd bin && file bootstrap && build-lambda-zip -o wcGetAll.zip bootstrap && rm bootstrap && cd ..

# build-wc-getOne:
# 	cd functions/wc-crud/wcGetOne && env GOARCH=amd64 GOOS=linux go build -ldflags="-s -w" -o ../../../bin/bootstrap main.go && cd ../../..
# 	cd bin && file bootstrap && build-lambda-zip -o wcGetOne.zip bootstrap && rm bootstrap && cd ..

# build: build-hello build-login build-tb-getAll build-tb-getOne build-lc-getAll build-lc-getOne build-wc-getAll build-wc-getOne

# deploy: build
# 	serverless deploy --aws-profile cheems-writes --verbose

# clean:
# 	rm -rf ./bin ./vendor Gopkg.lock bin .serverless

# log:
# 	serverless logs -f tb-getAll --stage dev --region ap-south-1 --aws-profile cheems-writes