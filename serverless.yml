app: cheems-writes
service: cw-backend
frameworkVersion: '>= 3.38.0'

plugins:
  - serverless-dotenv-plugin

useDotenv: true

custom:
  dotenv:
    path: .env

provider:
  name: aws
  runtime: provided.al2023
  region: ap-south-1
  stage: dev
  memorySize: 1024
  environment:
    MONGO_URI: ${env:MONGO_URI}
    JWT_SECRET: ${env:JWT_SECRET}
    ADMIN: ${env:ADMIN}
    PASS: ${env:PASS}
  httpApi:
    cors:
      allowedOrigins:
        - https://cheems-writes.vercel.app
      allowedHeaders:
        - Content-Type
        - Authorization
        - Origin 
      allowedMethods:
        - GET 
        - POST 
        - PUT
        - DELETE
        - OPTIONS
      allowCredentials: true

package: 
  individually: true

functions:
  # hello:
  #   handler: bootstrap
  #   package:
  #     artifact: bin/hello.zip
  #     individually: true
  #   events:
  #     - httpApi:
  #         path: /hello
  #         method: get

  login:
    handler: bootstrap
    package:
      artifact: bin/login.zip
      individually: true
    events:
      - httpApi:
          path: /login
          method: post

  tb-getAll:
    handler: bootstrap
    package:
      artifact: bin/tbGetAll.zip
      individually: true
    events:
      - httpApi:
          path: /tb/getall
          method: get

  tb-getOne:
    handler: bootstrap
    package:
      artifact: bin/tbGetOne.zip
      individually: true
    events:
      - httpApi:
          path: /tb/getOne/{slug}
          method: get

  tb-create:
    handler: bootstrap
    package:
      artifact: bin/tbCreate.zip
      individually: true
    events:
      - httpApi:
          path: /tb/create
          method: post

  tb-delete:
    handler: bootstrap
    package: 
      artifact: bin/tbDelete.zip
      individually: true
    events:
      - httpApi:
          path: /tb/delete/{slug}
          method: delete

  tb-update:
    handler: bootstrap
    package: 
      artifact: bin/tbUpdate.zip
      individually: true
    events:
      - httpApi:
          path: /tb/update/{slug}
          method: put

  lc-getAll:
    handler: bootstrap
    package:
      artifact: bin/lcGetAll.zip
      individually: true
    events:
      - httpApi:
          path: /lc/getAll
          method: get

  lc-create:
    handler: bootstrap
    package:
      artifact: bin/lcCreate.zip
      individually: true
    events:
      - httpApi:
          path: /lc/create
          method: post

  lc-delete:
    handler: bootstrap
    package: 
      artifact: bin/lcDelete.zip
      individually: true
    events:
      - httpApi:
          path: /lc/delete/{problemNo}
          method: delete

  wc-getAll:
    handler: bootstrap
    package:
      artifact: bin/wcGetAll.zip
    events:
      - httpApi:
          path: /wc/getAll
          method: get

  wc-getOne:
    handler: bootstrap
    package:
      artifact: bin/wcGetOne.zip
      individually: true
    events:
      - httpApi:
          path: /wc/getOne/{slug}
          method: get

  wc-create:
    handler: bootstrap
    package:
      artifact: bin/wcCreate.zip
      individually: true
    events:
      - httpApi:
          path: /wc/create
          method: post

  wc-delete:
    handler: bootstrap
    package: 
      artifact: bin/wcDelete.zip
      individually: true
    events:
      - httpApi:
          path: /wc/delete/{slug}
          method: delete

  wc-update:
    handler: bootstrap
    package: 
      artifact: bin/wcUpdate.zip
      individually: true
    events:
      - httpApi:
          path: /wc/update/{slug}
          method: put